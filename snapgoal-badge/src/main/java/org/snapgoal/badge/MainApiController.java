package org.snapgoal.badge;

import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/badge") // This means URL's start with /badge (after Application path)
public class MainApiController {
    @Autowired // This means to get the bean called badgeRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private BadgeRepository badgeRepository;

    @Value("${file.repository}") // Injecting the value of file.repository from application.properties
    private String fileRepositoryPath;

    @GetMapping(produces = "application/json")
    public @ResponseBody Iterable<Badge> getAllBadges() {
        return badgeRepository.findAll();
    }

    @PostMapping(produces = "application/json")
    public @ResponseBody BadgeUuid createBadge(@RequestParam("file") MultipartFile file) throws IOException {
        UUID uuid = UUID.randomUUID();
        final String uuidAsString = uuid.toString();
        Path p = Paths.get(fileRepositoryPath, uuidAsString);
        try (FileOutputStream fos = new FileOutputStream(p.toString())) {
            fos.write(file.getBytes());
        }
        return new BadgeUuid(uuidAsString);
    }

    @GetMapping(path = "/{uuid}", produces = "image/jpeg")
    public @ResponseBody byte[] getBadge(@PathVariable("uuid") UUID uuid) throws IOException {
        Path p = Paths.get(fileRepositoryPath, uuid.toString());
        try (FileInputStream fis = new FileInputStream(p.toString());
             ByteArrayOutputStream bos = new ByteArrayOutputStream()) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                bos.write(buffer, 0, bytesRead);
            }
            return bos.toByteArray();
        }
    }

    @PostMapping(path = "/{uuid}", produces = "application/json", consumes = "application/json")
    public @ResponseBody Badge createBadge(@PathVariable("uuid") UUID uuid, @RequestBody Badge badge) {
        return badgeRepository.save(badge);
    }
}
