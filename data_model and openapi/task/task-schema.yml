openapi: 3.0.0
info:
  title: Project, Team, and Task API
  description: API for managing projects, teams, and tasks
  version: 1.0.0
paths:
  /project:
    post:
      summary: Create a new project
      operationId: createProject
      requestBody:
        description: Project object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /project/{uuid}:
    get:
      summary: Get a specific project by ID
      operationId: getProjectById
      parameters:
        - name: uuid
          in: path
          description: ID of the project to fetch
          required: true
          schema:
            type: uuid
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found

  /projects:
    get:
      summary: List all projects
      operationId: listProjects
      responses:
        '200':
          description: A list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'

  /team:
    post:
      summary: Create a new team
      operationId: createTeam
      requestBody:
        description: Team object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /team/{uuid}:
    get:
      summary: Get a specific team by ID
      operationId: getTeamById
      parameters:
        - name: uuid
          in: path
          description: ID of the team to fetch
          required: true
          schema:
            type: uuid
      responses:
        '200':
          description: Team details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          description: Team not found

  /teams:
    get:
      summary: List all teams
      operationId: listTeams
      responses:
        '200':
          description: A list of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'

  /task:
    post:
      summary: Create a new task
      operationId: createTask
      requestBody:
        description: Task object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /task/{uuid}:
    get:
      summary: Get a specific task by ID
      operationId: getTaskById
      parameters:
        - name: uuid
          in: path
          description: ID of the task to fetch
          required: true
          schema:
            type: uuid
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found

  /tasks:
    get:
      summary: List all tasks
      operationId: listTasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

components:
  schemas:
    Project:
      type: object
      properties:
        title:
          type: string
          example: 'Project Alpha'
        uuid:
          type: string
          format: uuid
          example: 'd47e7f97-2f3b-4236-b234-e5c1f487f0bf'
        description:
          type: string
          example: 'A detailed description of the project and its goals.'
        start_date:
          type: string
          format: date
          example: '2024-01-01'
        end_date:
          type: string
          format: date
          example: '2024-12-31'
        status:
          type: string
          example: 'active'
        teams:
          type: array
          items:
            type: string
          example: ['550e8400-e29b-41d4-a716-446655440000', '550e8400-e29b-41d4-a716-446655440000']
      required:
        - title
        - teams

    Team:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: 'd47e7f97-2f3b-4236-b234-e5c1f487f0bf'
        title:
          type: string
          example: 'Phase 1 Team'
        members:
          type: array
          items:
            type: string
          example: ['550e8400-e29b-41d4-a716-446655440000', '550e8400-e29b-41d4-a716-446655440000']
        tasks:
          type: array
          items:
            type: string
          example: ['550e8400-e29b-41d4-a716-446655440000', '550e8400-e29b-41d4-a716-446655440000']
      required:
        - title
        - members
        - tasks

    Task:
      type: object
      properties:
        title:
          type: string
          example: 'Complete Documentation'
        description:
          type: string
          example: 'Write detailed documentation for the project.'
        image:
          type: string
          example: 'https://example.com/images/task.png'
        feedback:
          type: string
          example: 'text'
        badge_uuid:
          type: string
          example: '550e8400-e29b-41d4-a716-446655440000'
        priority:
          type: string
          enum: ['high', 'medium', 'low']
          example: 'high'
        status:
          type: string
          example: 'not started'
        start_date:
          type: string
          format: date
          example: '2024-01-01'
        due_date:
          type: string
          format: date
          example: '2024-02-01'
        assignee_id:
          type: string
          example: '550e8400-e29b-41d4-a716-446655440000'
      required:
        - title
        - description
        - badge_uuid
